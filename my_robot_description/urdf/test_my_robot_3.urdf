<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from test_my_robot.urdf.xacro       | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="my_robot">
  <!-- for giving color to a link -->
  <material name="green">
    <color rgba="0 0.5 0 1"/>
  </material>
  <material name="grey">
    <color rgba="0.5 0.5 0.5 1"/>
  </material>
  <material name="blue">
    <color rgba="0 0 0.5 1"/>
  </material>
  <!-- Everything has to be between this `robot` tag (like <html> tag in HTML) -->
  <!-- empty link -->
  <link name="base_footprint"/>
  <!-- base link is like the chasis of the robot -->
  <link name="base_link">
    <visual>
      <geometry>
        <!-- Everything in meters (60cm long, 40cm wide, 20cm high) -->
        <box size="0.6 0.4 0.2"/>
      </geometry>
      <!-- origin= center of gravity. relative to link origin -->
      <!-- rpy= roll-pitch-yaw (rotational x-y-z) -->
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <!-- use the material defined above -->
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.6 0.4 0.2"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <surface>
        <contact>
          <collide_without_contact>true</collide_without_contact>
        </contact>
      </surface>
    </collision>
    <inertial>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.1"/>
      <mass value="5.0"/>
      <!-- <inertia ixx="${(m/12.0) * (h*h + l*l)}" ixy="0.0" ixz="0.0" iyy="${(m/12.0) * (w*w + h*h)}" iyz="0.0" izz="${(m/12.0) * (w*w + l*l)}" /> -->
      <inertia ixx="1.3333333333333337" ixy="0.0" ixz="0.0" iyy="2.666666666666667" iyz="0.0" izz="3.466666666666667"/>
    </inertial>
  </link>
  <link name="left_wheel_link">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <material name="grey"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <surface>
        <contact>
          <collide_bitmask>0x04</collide_bitmask>
        </contact>
      </surface>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.002708333333333334" ixy="0.0" ixz="0.0" iyy="0.002708333333333334" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>
  <link name="right_wheel_link">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <material name="grey"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <surface>
        <contact>
          <collide_bitmask>0x04</collide_bitmask>
        </contact>
      </surface>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.002708333333333334" ixy="0.0" ixz="0.0" iyy="0.002708333333333334" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>
  <link name="caster_wheel_link">
    <visual>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="grey"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <surface>
        <contact>
          <collide_bitmask>0x04</collide_bitmask>
        </contact>
      </surface>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.5"/>
      <inertia ixx="0.0005000000000000001" ixy="0.0" ixz="0.0" iyy="0.0005000000000000001" iyz="0.0" izz="0.0005000000000000001"/>
    </inertial>
  </link>
  <!-- We have to provide joints -->
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.1"/>
  </joint>
  <!-- name= {parentLink}_{childLink}_joint (just a convention to keep things consistent, not a necessity) -->
  <!-- base-right_wheel joint -->
  <joint name="base_right_wheel_joint" type="continuous">
    <!-- [type="continuous"]= revolute but with no limits -->
    <!-- 4 most common joint types= fixed, revolute, continuous, prismatic -->
    <parent link="base_link"/>
    <child link="right_wheel_link"/>
    <!-- ! tip for beginners= put 0 to everything first, then modify by observing the positions at RViz -->
    <origin rpy="0 0 0" xyz="-0.15 -0.225 0"/>
    <!-- 0= no rotation, 1= +rotation, -1= -rotation -->
    <axis xyz="0 1 0"/>
    <!-- lower, upper limits= required for [type="revolute"] (in radians) -->
    <!-- <limit lower="-${ pi / 2.0 }" upper="${ pi / 2.0 }" velocity="100" effort="100" /> -->
  </joint>
  <!-- base-left_wheel joint -->
  <joint name="base_left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel_link"/>
    <origin rpy="0 0 0" xyz="-0.15 0.225 0"/>
    <axis xyz="0 1 0"/>
  </joint>
  <joint name="base_caster_wheel_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_wheel_link"/>
    <origin rpy="0 0 0" xyz="0.19999999999999998 0 -0.05"/>
  </joint>
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="left_wheel_link">
    <material>Gazebo/Grey</material>
  </gazebo>
  <gazebo reference="right_wheel_link">
    <material>Gazebo/Grey</material>
  </gazebo>
  <gazebo reference="caster_wheel_link">
    <material>Gazebo/Grey</material>
    <!-- these lines are about friction (coefficients) -->
    <mu1 value="0.1"/>
    <mu2 value="0.1"/>
  </gazebo>
  <!-- diff drive plugin -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="diff_drive_controller">
      <!-- Update rate in Hz -->
      <update_rate>50</update_rate>
      <!-- wheels -->
      <left_joint>base_left_wheel_joint</left_joint>
      <right_joint>base_right_wheel_joint</right_joint>
      <!-- kinematics -->
      <wheel_separation>0.45</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>
      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.8</max_wheel_acceleration>
      <!-- input -->
      <!-- send commands to this topic, robot node will listen to this topic -->
      <command_topic>cmd_vel</command_topic>
      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <robotNamespace/>
      <always_on>1</always_on>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <!-- <odometrySource>world</odometrySource> -->
      <robot_base_frame>base_footprint</robot_base_frame>
    </plugin>
  </gazebo>
  <!-- Reference -> https://classic.gazebosim.org/tutorials?tut=ros_gzplugins -->
  <!-- we have to define link and joint -->
  <link name="lidar_link">
    <visual>
      <geometry>
        <cylinder length="0.01" radius="0.01"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.01" radius="0.01"/>
      </geometry>
      <surface>
        <contact>
          <collide_bitmask>0x04</collide_bitmask>
        </contact>
      </surface>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="3.333333333333333e-06" ixy="0.0" ixz="0.0" iyy="3.333333333333333e-06" iyz="0.0" izz="5e-06"/>
    </inertial>
  </link>
  <joint name="base_lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.22"/>
    <!-- <axis xyz="0.0 0.0 0.0"/> -->
  </joint>
  <gazebo reference="lidar_link">
    <material>Gazebo/Red</material>
    <sensor name="laser" type="ray">
      <pose> 0 0 0 0 0 0 </pose>
      <visualize>0</visualize>
      <update_rate>100</update_rate>
      <!-- <update_rate>1000</update_rate> -->
      <always_on>1</always_on>
      <ray>
        <scan>
          <horizontal>
            <!-- <samples>360</samples> -->
            <resolution>1</resolution>
            <samples>180</samples>
            <!-- <min_angle>${-3*pi/4.0}</min_angle>
            <max_angle>${3*pi/4.0}</max_angle> -->
            <min_angle>-1.5707963267948966</min_angle>
            <max_angle>1.5707963267948966</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.3</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_ray_sensor.so" name="laser_controller">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
</robot>
